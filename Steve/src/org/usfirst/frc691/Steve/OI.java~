// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc691.Steve;

import org.usfirst.frc691.Steve.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc691.Steve.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton raiseElevatorButton;
    public JoystickButton lowerElevatorButton;
    public JoystickButton moveClawButton;
    public JoystickButton moveGearDropperButton;
    public JoystickButton sweepRopeButton;
    public Joystick mainJoystick;
    public JoystickButton setCameraForwardButton;
    public JoystickButton setCameraBackwardButton;
    public Joystick cameraJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        cameraJoystick = new Joystick(1);
        
        setCameraBackwardButton = new JoystickButton(cameraJoystick, 1);
        setCameraBackwardButton.whileHeld(new SetCameraBackward());
        setCameraForwardButton = new JoystickButton(cameraJoystick, 1);
        setCameraForwardButton.whileHeld(new SetCameraForward());
        mainJoystick = new Joystick(0);
        
        sweepRopeButton = new JoystickButton(mainJoystick, 1);
        sweepRopeButton.whileHeld(new SweepRope());
        moveGearDropperButton = new JoystickButton(mainJoystick, 1);
        moveGearDropperButton.whileHeld(new MoveGearDropper());
        moveClawButton = new JoystickButton(mainJoystick, 1);
        moveClawButton.whileHeld(new MoveClaw());
        lowerElevatorButton = new JoystickButton(mainJoystick, 1);
        lowerElevatorButton.whileHeld(new LowerElevator());
        raiseElevatorButton = new JoystickButton(mainJoystick, 1);
        raiseElevatorButton.whileHeld(new RaiseElevator());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Raise Elevator", new RaiseElevator());
        SmartDashboard.putData("Lower Elevator", new LowerElevator());
        SmartDashboard.putData("Move Claw", new MoveClaw());
        SmartDashboard.putData("Move Gear Dropper", new MoveGearDropper());
        SmartDashboard.putData("Sweep Rope", new SweepRope());
        SmartDashboard.putData("Set Camera Forward", new SetCameraForward());
        SmartDashboard.putData("Set Camera Backward", new SetCameraBackward());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getMainJoystick() {
        return mainJoystick;
    }

    public Joystick getCameraJoystick() {
        return cameraJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

